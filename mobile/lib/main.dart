import 'dart:async';

import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:d9_dream_app/presentation/pages/splash_page.dart';
import 'package:d9_dream_app/bloc/auth/auth_bloc.dart';
import 'package:d9_dream_app/data/repositories/auth_repository.dart';
import 'package:d9_dream_app/data/repositories/dream_repository.dart';
import 'package:d9_dream_app/presentation/pages/home_page.dart';
import 'package:d9_dream_app/presentation/pages/sign_in_page.dart';

// NOTE: firebase_options.dart is generated by `flutterfire configure`.
// Keep a placeholder import commented out; ensure to generate before running.
// import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize Firebase; during dev, you must generate firebase_options.dart
  // or use default Firebase.initializeApp with native files in platforms.
  try {
    await Firebase.initializeApp(
        // options: DefaultFirebaseOptions.currentPlatform,
        );
  } catch (e) {
    // Firebase will throw if misconfigured; app can still run but auth will fail.
    debugPrint('Firebase init error: $e');
  }

  final authRepo = AuthRepository();
  final dreamRepo = DreamRepository(authRepository: authRepo);

  runZonedGuarded(() {
    runApp(MyApp(authRepository: authRepo, dreamRepository: dreamRepo));
  }, (error, stack) {
    // Global error logging hook
    debugPrint('Zoned error: $error');
  });
}

class MyApp extends StatelessWidget {
  const MyApp({super.key, required this.authRepository, required this.dreamRepository});

  final AuthRepository authRepository;
  final DreamRepository dreamRepository;

  @override
  Widget build(BuildContext context) {
    return MultiRepositoryProvider(
      providers: [
        RepositoryProvider.value(value: authRepository),
        RepositoryProvider.value(value: dreamRepository),
      ],
      child: BlocProvider(
        create: (_) => AuthBloc(authRepository)..add(AuthStarted()),
        child: MaterialApp(
          title: 'Dream Analysis',
          theme: ThemeData(
            colorScheme: ColorScheme.fromSeed(seedColor: Colors.indigo),
            useMaterial3: true,
          ),
          home: const Root(),
        ),
      ),
    );
  }
}

class Root extends StatelessWidget {
  const Root({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthBloc, AuthState>(
      builder: (context, state) {
        if (state is AuthLoading) return const SplashPage();
        if (state is Authenticated) return const HomePage();
        return const SignInPage();
      },
    );
  }
}
